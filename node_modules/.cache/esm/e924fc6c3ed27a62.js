let inquirer;_3ed‍.x([["cli",()=>cli]]);_3ed‍.w("inquirer",[["default",["inquirer"],function(v){inquirer=v}]]);///Notes
//Build a tiny command line app that stores a multi-value string dictionary in memory.  
//This should be an application that is run on the command line and can be used interactively as shown in the examples.
// dict = {
//     key : []
// }



var miniDictionary= {}

       function cli() { //entry point
    inquirer.prompt([{
        type: 'input',
        name: 'operation',
        message: 'begin'
    }])
    .then(answer =>{
        let input = Object.values(answer)[0].split(" ");//[cmd, key, value]
        handleInput(input);
    }) 
}

function keepGoing(){
    inquirer.prompt([{
        type: 'input',
        name: 'operation',
        message: 'please enter next operation:'
    }])
    .then(answer =>{
        let input = Object.values(answer)[0].split(" ");//[cmd, key, value]
        handleInput(input);
    }) 
}


function handleInput(input){
    let cmd = input[0];
    let key = null;
    let value = null;

    if(input.length == 3){
        key = input[1];
        value = input[2]
    }

    if(input.length == 2){
        key = input[1];
    }

    if(input.length > 3 || input[0] == ''){
        cmd = 'INVALID INPUT';
    }

    switch (cmd.toUpperCase()) {
            case 'KEYS':
                keys(miniDictionary);
                keepGoing();
                break;
            case 'MEMBERS':
                members(key);
                keepGoing();
                break;
            case 'ADD':
                add(key, value);
                keepGoing();
                break;
            case 'REMOVE':
                remove(key, value);
                keepGoing();
                break;
            case 'REMOVEALL':
                removeAll(key);
                keepGoing();
                break;
            case 'CLEAR':
                clear();
                keepGoing();
                break;
            case 'KEYEXISTS':
                keyExists(key);
                keepGoing();
                break;
            case 'MEMEBEREXISTS':
                memberExists(key, value);
                keepGoing();
                break;
            case 'ALLMEMEBERS':
                allMembers(miniDictionary);
                keepGoing();
                break;
            case 'ITEMS':
                items(miniDictionary)
                keepGoing();
                break;
            case 'EXIT':
                console.log('Exiting...')
                break;
            case 'INVALID INPUT':
                console.log('Invalid Input')
                keepGoing();
                break
            default:
                console.log('Invalid Input')
                keepGoing();
                break;
        }
}
   

//1.Returns all the keys in a dictionary
//Return 'empty set' if empty
//required parameters = KEY
function keys(dict){
    let keys = Object.keys(dict)
    if(keys.length > 0){
        for (const key of keys) {
            _3ed‍.g.console.log(key);
        }
    }else{
        console.log('empty set')
    }
    
}

//2.Returns all the members for a given key
//Return 'empty set' if empty
//required parameters = MEMBERS key
function members(key){
    if(!miniDictionary.hasOwnProperty(key)){
        console.log(`ERROR, key does not exist for ${key}`);
    }else{
        miniDictionay[key].forEach(element => {
            _3ed‍.g.console.log(element);
        });
    }
}


//3.Add a member to a collection for a given key
// display an error if the key-value pair already exists (and if a value pair isn't specified )
// required parameters = ADD key value
function add(key, value){

    if(key==null || value==null){
        console.log('invalid input');
        return;
    }

    if(miniDictionary.hasOwnProperty(key) && miniDictionary[key] == value){
        console.log(`ERROR, member: ${value} already exists for key: ${key}`);
        return;
    } 

    if(!miniDictionary.hasOwnProperty(key)){
        miniDictionary[key] = new Array(value);
        console.log('added');
    }else{
        miniDictionary[key].push(value);
        console.log('added');
    } 
}

//4.Removes a member from a key. 
//If the last member is removed from the key, the key is removed from the dictionary. 
//If the key or member does not exist, displays an error.
//display error if it does not exists
//required parameters = REMOVE key value
function remove(key, value){
    if(key==null || value==null){
        console.log('invalid input');
        return;
    }
    
    if(!miniDictionary.hasOwnProperty(key)){
        console.log(`ERROR, key does not exist for ${key}`);
        return;
    }

    if(!miniDictionary[key].includes(value)){
        console.log(`ERROR, member: ${value} does not exist for ${key}`);
        return;
    }

    let newValue = miniDictionary[key].filter(x => x != value);
    miniDictionary[key] = newValue;

    console.log('Removed')
}

//5.Removes all members for a key and removes the key from the dictionary. 
//Returns an error if the key does not exist.
//required parameters = REMOVEALL key
function removeAll(key){
    if(key==null){
        console.log('invalid input')
        return;
    }

    if(!miniDictionary.hasOwnProperty(key)){
        console.log(`ERROR, key does not exist for ${key}`);
        return;
    }

    delete miniDictionary[key];
}

//6. Clear removes all keys and all members from the dictionary
//required parameter = CLEAR
function clear(){
    miniDictionary = {};
    console.log('cleared')
}

//7.KeyExists returns whether or not a key exists
//required parameters = KEYEXISTS key
function keyExists(key){
    miniDictionary.hasOwnProperty(key) ? console.log(true) : console.log(false);
}

//8.MemberExists returns whether or not a member exists
//required parameters = MEMBEREXISTS key value
function memberExists(key, value){
    (miniDictionary.hasOwnProperty(key) && miniDictionary[key].includes(value)) ? console.log(true) : console.log(false);
}

//9. returns all memmbers
//required input = ALLMEMBERS
function allMembers(dict){
    let values = Object.values(dict)
    if(values.length != 0){
        for (const value of values) {
            _3ed‍.g.console.log(value);
        }
    }else{
        console.log('empty set');
    } 
}

//10. Returns all the keys in the dictionary and all their members
//required parameters = ITEMS
function items(dict){
    if(Object.keys(dict).length === 0){
        console.log('empty set');
    }else{
        for (const key of dict) {
            dict[key].forEach(element => {
                console.log(`${key} : ${element}`)
            });
        }
    }
}


